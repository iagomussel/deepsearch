#!/usr/bin/env node

/**
 * Script de configura√ß√£o inicial do DeepSearch
 */

const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');
const inquirer = require('inquirer');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

class DeepSearchSetup {
  constructor() {
    this.projectRoot = process.cwd();
  }

  async run() {
    console.log(chalk.cyan('üöÄ DeepSearch - Configura√ß√£o Inicial\n'));

    try {
      // 1. Criar diret√≥rios necess√°rios
      await this.createDirectories();
      
      // 2. Verificar depend√™ncias
      await this.checkDependencies();
      
      // 3. Configurar ambiente
      await this.setupEnvironment();
      
      // 4. Inicializar Docker (opcional)
      await this.setupDocker();
      
      // 5. Verificar sa√∫de dos servi√ßos
      await this.healthCheck();
      
      console.log(chalk.green('\n‚úÖ Setup conclu√≠do com sucesso!'));
      console.log(chalk.yellow('\nüîß Pr√≥ximos passos:'));
      console.log('1. Execute: docker-compose up -d');
      console.log('2. Aguarde os modelos LLM serem baixados');
      console.log('3. Execute: node index.js "sua primeira pesquisa"');

    } catch (error) {
      console.error(chalk.red('\n‚ùå Erro durante setup:'), error.message);
      process.exit(1);
    }
  }

  async createDirectories() {
    console.log(chalk.blue('üìÅ Criando diret√≥rios...'));
    
    const dirs = [
      'reports',
      'logs',
      'temp',
      'docker/postgres',
      'docker/ollama',
      'docker/api'
    ];

    for (const dir of dirs) {
      const fullPath = path.join(this.projectRoot, dir);
      await fs.ensureDir(fullPath);
      console.log(chalk.gray(`  ‚úì ${dir}`));
    }
  }

  async checkDependencies() {
    console.log(chalk.blue('\nüîß Verificando depend√™ncias...'));

    // Node.js
    const nodeVersion = process.version;
    console.log(chalk.gray(`  Node.js: ${nodeVersion}`));

    // NPM packages
    const packageJson = await fs.readJson(path.join(this.projectRoot, 'package.json'));
    const deps = Object.keys(packageJson.dependencies || {});
    console.log(chalk.gray(`  Depend√™ncias: ${deps.length} pacotes`));

    // Docker
    try {
      const { stdout } = await execAsync('docker --version');
      console.log(chalk.gray(`  Docker: ${stdout.trim()}`));
    } catch (error) {
      console.log(chalk.yellow('  ‚ö†Ô∏è  Docker n√£o encontrado - Instale para usar containers'));
    }

    // Docker Compose
    try {
      const { stdout } = await execAsync('docker-compose --version');
      console.log(chalk.gray(`  Docker Compose: ${stdout.trim()}`));
    } catch (error) {
      console.log(chalk.yellow('  ‚ö†Ô∏è  Docker Compose n√£o encontrado'));
    }
  }

  async setupEnvironment() {
    console.log(chalk.blue('\n‚öôÔ∏è  Configurando ambiente...'));

    const envFile = path.join(this.projectRoot, '.env');
    
    if (await fs.pathExists(envFile)) {
      const { overwrite } = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'overwrite',
          message: 'Arquivo .env j√° existe. Sobrescrever?',
          default: false
        }
      ]);

      if (!overwrite) {
        console.log(chalk.gray('  Mantendo .env existente'));
        return;
      }
    }

    // Configura√ß√µes interativas
    const config = await inquirer.prompt([
      {
        type: 'input',
        name: 'apiKey',
        message: 'API Key para admin (deixe vazio para usar padr√£o):',
        default: 'deepsearch-dev-key'
      },
      {
        type: 'list',
        name: 'logLevel',
        message: 'N√≠vel de log:',
        choices: ['debug', 'info', 'warn', 'error'],
        default: 'info'
      },
      {
        type: 'confirm',
        name: 'enableShellTools',
        message: 'Habilitar ferramentas shell (PERIGOSO)?',
        default: false
      },
      {
        type: 'input',
        name: 'reportsDir',
        message: 'Diret√≥rio para relat√≥rios:',
        default: './reports'
      }
    ]);

    const envContent = `# DeepSearch Environment Configuration
# Generated by setup script on ${new Date().toISOString()}

# Database
DATABASE_URL=postgresql://deepsearch_user:deepsearch_pass@localhost:5432/deepsearch
DB_HOST=localhost
DB_PORT=5432
DB_NAME=deepsearch
DB_USER=deepsearch_user
DB_PASS=deepsearch_pass

# Ollama LLM
OLLAMA_BASE_URL=http://localhost:11434
DEFAULT_LLM_MODEL=llama3.1:8b
EMBEDDING_MODEL=nomic-embed-text
CODE_MODEL=codellama:7b

# API
PORT=3000
NODE_ENV=development
API_KEY=${config.apiKey}
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Logging
LOG_LEVEL=${config.logLevel}
LOG_FILE=./logs/deepsearch.log
LOG_MAX_SIZE=10mb
LOG_MAX_FILES=5

# Security
ENABLE_SHELL_TOOLS=${config.enableShellTools}
ALLOWED_DOMAINS=*
BLOCKED_DOMAINS=localhost,127.0.0.1,10.*,192.168.*,172.16.*

# Reports
REPORTS_DIR=${config.reportsDir}
REPORTS_FORMAT=markdown
AUTO_SAVE_REPORTS=true

# Search
SEARCH_TIMEOUT_MS=30000
MAX_SEARCH_RESULTS=50
MAX_CONCURRENT_SCRAPES=5
USER_AGENT=DeepSearch Bot 1.0

# Performance
MAX_VECTOR_SEARCH_RESULTS=10
EMBEDDING_BATCH_SIZE=100
MAX_CONTENT_LENGTH=50000
PARALLEL_PROCESSING_LIMIT=5
`;

    await fs.writeFile(envFile, envContent);
    console.log(chalk.green('  ‚úì Arquivo .env criado'));
  }

  async setupDocker() {
    console.log(chalk.blue('\nüê≥ Configura√ß√£o Docker...'));

    try {
      await execAsync('docker --version');
    } catch (error) {
      console.log(chalk.yellow('  Docker n√£o dispon√≠vel, pulando...'));
      return;
    }

    const { setupDocker } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'setupDocker',
        message: 'Inicializar containers Docker agora?',
        default: false
      }
    ]);

    if (!setupDocker) {
      console.log(chalk.gray('  Setup Docker adiado'));
      return;
    }

    console.log(chalk.yellow('  Iniciando containers (isso pode demorar)...'));

    try {
      // Pull das imagens base
      await execAsync('docker-compose pull');
      console.log(chalk.green('  ‚úì Imagens baixadas'));

      // Inicia apenas PostgreSQL primeiro
      await execAsync('docker-compose up -d postgres');
      console.log(chalk.green('  ‚úì PostgreSQL iniciado'));

      // Aguarda PostgreSQL ficar pronto
      console.log(chalk.yellow('  Aguardando PostgreSQL...'));
      await this.waitForPostgres();

      // Inicia Ollama
      await execAsync('docker-compose up -d ollama');
      console.log(chalk.green('  ‚úì Ollama iniciado'));

      console.log(chalk.yellow('  ‚è≥ Modelos LLM ser√£o baixados em background'));

    } catch (error) {
      console.log(chalk.red('  ‚ùå Erro ao iniciar Docker:'), error.message);
    }
  }

  async waitForPostgres(maxWait = 60000) {
    const startTime = Date.now();
    
    while (Date.now() - startTime < maxWait) {
      try {
        await execAsync('docker-compose exec postgres pg_isready -U deepsearch_user -d deepsearch');
        return true;
      } catch (error) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    throw new Error('PostgreSQL n√£o ficou pronto a tempo');
  }

  async healthCheck() {
    console.log(chalk.blue('\nüè• Verifica√ß√£o de sa√∫de...'));

    // Verifica se os arquivos principais existem
    const requiredFiles = [
      'package.json',
      'index.js',
      'docker-compose.yml',
      'src/services/LLMService.js',
      'src/services/WebSearchService.js',
      'src/services/DatabaseService.js',
      'config/default.js'
    ];

    for (const file of requiredFiles) {
      const exists = await fs.pathExists(path.join(this.projectRoot, file));
      if (exists) {
        console.log(chalk.green(`  ‚úì ${file}`));
      } else {
        console.log(chalk.red(`  ‚ùå ${file} n√£o encontrado`));
      }
    }

    // Verifica containers se Docker est√° dispon√≠vel
    try {
      const { stdout } = await execAsync('docker-compose ps');
      if (stdout.includes('postgres') || stdout.includes('ollama')) {
        console.log(chalk.green('  ‚úì Containers Docker detectados'));
      }
    } catch (error) {
      console.log(chalk.gray('  Docker containers n√£o verificados'));
    }
  }
}

// Executa setup se chamado diretamente
if (require.main === module) {
  const setup = new DeepSearchSetup();
  setup.run().catch(console.error);
}

module.exports = DeepSearchSetup;
